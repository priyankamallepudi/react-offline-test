import React, { useEffect, useState } from 'react';
import { Chart } from "react-google-charts";

function App() {
  const [fuels, setFuels] = useState([]);
  const [energyPeriod, setEnergyPeriod] = useState('');
  const [pieData, setPieData] = useState([]);
  
   const pieOptions = {
    title: "Energy generation",
  };

  const barOptions = {
    title: "Energy generation by various fuels",
    chartArea: { width: "50%" },
    hAxis: {
      title: "Total Energy",
      minValue: 0,
    },
    vAxis: {
      title: "Fuels",
    },
  };

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const response = await fetch('https://api.carbonintensity.org.uk/generation');
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      const data = await response.json();
      setEnergyPeriod(`${formatDate(data.data.from)}-${formatDate(data.data.to)}`)
      const generationMix = data.data.generationmix;
      setFuels(generationMix);
      const tempPieData = [["Fuel", "%"]];
      const tempBarData = [
        ["Source", "Percentage"]
      ];
     generationMix.forEach((source) => {
        tempPieData.push([source.fuel, source.perc]);
      });
      setPieData(tempPieData);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  function formatDate(inputDate) {
    const date = new Date(inputDate);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0'); 
    const day = String(date.getDate()).padStart(2, '0');
    const formattedDate = `${month}/${day}/${year}`;
    return formattedDate;
  }

  return (
    <div>
      <h1>Energy Generated by United Kingdom</h1>
<table class="table">
  <thead class="thead-light">
    <tr>
      <th scope="col">#</th>
      <th scope="col">Source</th>
      <th scope="col">Percentage</th>
      <th scope="col">Period</th>
    </tr>
  </thead>
  <tbody>
        {fuels.map((source, index) => (
            <tr key={index + 1}>
                <th scope="row">{index + 1}</th>
                <td>{source.fuel}</td>
                <td>{source.perc}%</td>
                <td>{energyPeriod}</td> 
            </tr>
         
        ))}
  </tbody>
</table>
      <div>
      <ul class="nav nav-tabs" id="myTab" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="pie-tab" data-bs-toggle="tab" data-bs-target="#pie" type="button" role="tab" aria-controls="pie" aria-selected="true">Pie chart Representation</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="bar-tab" data-bs-toggle="tab" data-bs-target="#bar" type="button" role="tab" aria-controls="bar" aria-selected="false">Bar Graph Representation</button>
  </li>
</ul>
<div class="tab-content" id="myTabContent">
  <div class="tab-pane fade show active" id="pie" role="tabpanel" aria-labelledby="pie-tab">
  <Chart
      chartType="PieChart"
      data={pieData}
      options={pieOptions}
      width={"100%"}
      height={"400px"}
    />
  </div>
  <div class="tab-pane fade" id="bar" role="tabpanel" aria-labelledby="bar-tab">
  <Chart
      chartType="BarChart"
      width="100%"
      height="400px"
      data={pieData}
      options={barOptions}
    />
  </div>
</div>
      </div>
    </div>
  );
}

export default App;
